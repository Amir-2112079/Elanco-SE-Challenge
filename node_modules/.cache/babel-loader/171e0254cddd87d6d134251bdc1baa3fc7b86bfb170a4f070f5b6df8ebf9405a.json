{"ast":null,"code":"var _jsxFileName = \"E:\\\\Placement Tests\\\\Elanco-Task\\\\api-test\\\\src\\\\Contents\\\\Applications.js\",\n  _s = $RefreshSig$();\nimport '../Css/Applications.css';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Applications() {\n  _s();\n  //whether the data is being loaded from the API or not \n  const [loading, setLoading] = useState(false);\n\n  //an array that returns the data from API \n  const [applications, setApplications] = useState([]);\n\n  //can be used to select specific applications \n  const [selectedApplication, setSelectedApplication] = useState(null);\n\n  //shows the details of the selected application \n  const [applicationDetail, setApplicationDetail] = useState(null);\n\n  //indicates to whether display the the list of applications or just the details \n  const [showApp, setShowApp] = useState(true);\n\n  //async function that sends request to get the values \n  const displayApplication = async () => {\n    setLoading(true);\n    const response = await axios.get('https://engineering-task.elancoapps.com/api/applications');\n    setApplications(response.data);\n    setLoading(false);\n  };\n  //async function that sends request to get the details of the selected application\n  const chooseApplication = async application => {\n    setSelectedApplication(application);\n    setLoading(true);\n    const response = await axios.get(`https://engineering-task.elancoapps.com/api/applications/${application}`);\n    setApplicationDetail(response.data);\n    setLoading(false);\n    setShowApp(false);\n  };\n\n  //allows to clear the selected application, and load the original applications\n  const goBack = () => {\n    setSelectedApplication(null);\n    setApplications([]);\n    setShowApp(true);\n  };\n\n  //adding the initial values for the sort functions\n  const [sortOrder, setSortOrder] = useState({\n    ConsumedQuantity: 'asc',\n    Cost: 'asc'\n  });\n  //keeps track of the sort order e.g., are we in asc order or desc\n  const [sortedData, setSortedData] = useState(null);\n  const sortByConsumedQuantity = () => {\n    //to display to the users that what order their on \n    const order = sortOrder.ConsumedQuantity === 'asc' ? 'desc' : 'asc';\n    //creating a new array to save all the new sorted data by subtracting \"x by y\" to get the \"desc\" and \"y by x\" to get \"asc\" \n    const sorted = sortedData.sort((x, y) => {\n      return order === 'asc' ? x.ConsumedQuantity - y.ConsumedQuantity : y.ConsumedQuantity - x.ConsumedQuantity;\n    });\n    //sorted data is updated in the setSortedData\n    setSortedData(sorted);\n    //used a spread operator overwrites the current state of sort order by the new state after it is sorted into asc or desc order.\n    setSortOrder({\n      ...sortOrder,\n      ConsumedQuantity: order\n    });\n  };\n\n  //same as the previous function\n  const sortByCost = () => {\n    const order = sortOrder.Cost === 'asc' ? 'desc' : 'asc';\n    const sorted = sortedData.sort((x, y) => {\n      return order === 'asc' ? x.Cost - y.Cost : y.Cost - x.Cost;\n    });\n    setSortedData(sorted);\n    setSortOrder({\n      ...sortOrder,\n      Cost: order\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), showApp && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: displayApplication,\n      children: \"Load Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 24\n    }, this) :\n    // Render a list of applications along with a button to see the details of each application\n    // The applications are displayed as a list wrapped around a \"li\"\n    // .map is used to iterate through the array\n    showApp ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: applications.map(application => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [application, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => chooseApplication(application),\n          children: \"View Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 33\n        }, this)]\n      }, application, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 29\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }, this) :\n    /*#__PURE__*/\n    // Display application information if applicationDetail is true\n    // If loading is true, show a message to let the user know the application information is loading\n    // If applicationDetail is false, show a message to let the user know to select an application\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedApplication\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: goBack,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 25\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 36\n      }, this) : applicationDetail ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"rbtn\",\n          onClick: sortByConsumedQuantity,\n          children: [\"Sort by ConsumedQuantity (\", sortOrder.ConsumedQuantity, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"rbtn\",\n          onClick: sortByCost,\n          children: [\"Sort by Cost (\", sortOrder.Cost, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(applicationDetail, null, 5)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading application information...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n_s(Applications, \"sK6s6jJMvRuQTAQpCdOO5ykKf3g=\");\n_c = Applications;\nexport default Applications;\nvar _c;\n$RefreshReg$(_c, \"Applications\");","map":{"version":3,"names":["React","useState","axios","Applications","loading","setLoading","applications","setApplications","selectedApplication","setSelectedApplication","applicationDetail","setApplicationDetail","showApp","setShowApp","displayApplication","response","get","data","chooseApplication","application","goBack","sortOrder","setSortOrder","ConsumedQuantity","Cost","sortedData","setSortedData","sortByConsumedQuantity","order","sorted","sort","x","y","sortByCost","map","JSON","stringify"],"sources":["E:/Placement Tests/Elanco-Task/api-test/src/Contents/Applications.js"],"sourcesContent":["import '../Css/Applications.css';\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nfunction Applications() {\r\n    //whether the data is being loaded from the API or not \r\n    const [loading, setLoading] = useState(false);\r\n\r\n    //an array that returns the data from API \r\n    const [applications, setApplications] = useState([]);\r\n\r\n    //can be used to select specific applications \r\n    const [selectedApplication, setSelectedApplication] = useState(null);\r\n\r\n    //shows the details of the selected application \r\n    const [applicationDetail, setApplicationDetail] = useState(null);\r\n\r\n    //indicates to whether display the the list of applications or just the details \r\n    const [showApp, setShowApp] = useState(true);\r\n\r\n\r\n\r\n    //async function that sends request to get the values \r\n    const displayApplication = async () => {\r\n        setLoading(true);\r\n        const response = await axios.get('https://engineering-task.elancoapps.com/api/applications');\r\n        setApplications(response.data);\r\n        setLoading(false);\r\n    };\r\n    //async function that sends request to get the details of the selected application\r\n    const chooseApplication = async (application) => {\r\n        setSelectedApplication(application);\r\n        setLoading(true);\r\n        const response = await axios.get(`https://engineering-task.elancoapps.com/api/applications/${application}`);\r\n        setApplicationDetail(response.data);\r\n        setLoading(false);\r\n        setShowApp(false);\r\n    };\r\n\r\n    //allows to clear the selected application, and load the original applications\r\n    const goBack = () => {\r\n        setSelectedApplication(null);\r\n        setApplications([]);\r\n        setShowApp(true);\r\n    };\r\n\r\n\r\n    //adding the initial values for the sort functions\r\n    const [sortOrder, setSortOrder] = useState({\r\n        ConsumedQuantity: 'asc',\r\n        Cost: 'asc'\r\n    });\r\n    //keeps track of the sort order e.g., are we in asc order or desc\r\n    const [sortedData, setSortedData] = useState(null);\r\n\r\n\r\n    const sortByConsumedQuantity = () => {\r\n        //to display to the users that what order their on \r\n        const order = sortOrder.ConsumedQuantity === 'asc' ? 'desc' : 'asc';\r\n        //creating a new array to save all the new sorted data by subtracting \"x by y\" to get the \"desc\" and \"y by x\" to get \"asc\" \r\n        const sorted = sortedData.sort((x, y) => {\r\n            return order === 'asc' ? x.ConsumedQuantity - y.ConsumedQuantity : y.ConsumedQuantity - x.ConsumedQuantity;\r\n        });\r\n        //sorted data is updated in the setSortedData\r\n        setSortedData(sorted);\r\n        //used a spread operator overwrites the current state of sort order by the new state after it is sorted into asc or desc order.\r\n        setSortOrder({ ...sortOrder, ConsumedQuantity: order });\r\n    };\r\n\r\n    //same as the previous function\r\n    const sortByCost = () => {\r\n        const order = sortOrder.Cost === 'asc' ? 'desc' : 'asc';\r\n        const sorted = sortedData.sort((x, y) => {\r\n            return order === 'asc' ? x.Cost - y.Cost : y.Cost - x.Cost;\r\n        })\r\n        setSortedData(sorted);\r\n        setSortOrder({ ...sortOrder, Cost: order });\r\n    };\r\n\r\n\r\n    return (\r\n        <div className='main'>\r\n            <h1>Applications</h1>\r\n\r\n            {/* Render a button to retrieve data from API if showApp is true */}\r\n            {showApp && <button className='btn' onClick={displayApplication}>Load Applications</button>}\r\n\r\n            {/* Renders a paragraph if loading is true */}\r\n            {loading ? <p>Loading...</p> :\r\n\r\n                // Render a list of applications along with a button to see the details of each application\r\n                // The applications are displayed as a list wrapped around a \"li\"\r\n                // .map is used to iterate through the array\r\n                showApp ? (\r\n                    <ul>\r\n                        {applications.map((application) => (\r\n                            <li key={application}>\r\n                                {application}{\" \"}\r\n                                <button className='btn' onClick={() => chooseApplication(application)}>\r\n                                    View Details\r\n                                </button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) :\r\n\r\n                    // Display application information if applicationDetail is true\r\n                    // If loading is true, show a message to let the user know the application information is loading\r\n                    // If applicationDetail is false, show a message to let the user know to select an application\r\n                    <div>\r\n                        <h2>{selectedApplication}</h2>\r\n                        <button className='btn' onClick={goBack}>Go Back</button>\r\n                        {loading ? <p>Loading...</p> :\r\n                            applicationDetail ? (\r\n                                < >\r\n                                    <br />\r\n                                    <button className='rbtn' onClick={sortByConsumedQuantity}>\r\n                                        Sort by ConsumedQuantity ({sortOrder.ConsumedQuantity})\r\n                                    </button>\r\n                                    <br />\r\n                                    <button className='rbtn' onClick={sortByCost}>\r\n                                        Sort by Cost ({sortOrder.Cost})\r\n                                    </button>\r\n                                    <pre>{JSON.stringify(applicationDetail, null, 5)}</pre>\r\n                                </>\r\n                            ) : <p>Loading application information...</p>}\r\n                    </div>\r\n            }\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Applications;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}