{"ast":null,"code":"var _jsxFileName = \"E:\\\\Placement Tests\\\\Elanco-Task\\\\api-test\\\\src\\\\Contents\\\\Applications.js\",\n  _s = $RefreshSig$();\nimport '../Css/Applications.css';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Applications() {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [applications, setApplications] = useState([]);\n  const [selectedApplication, setSelectedApplication] = useState(null);\n  const [applicationInfo, setApplicationInfo] = useState(null);\n  const loadApplications = async () => {\n    setIsLoading(true);\n    const response = await axios.get('https://engineering-task.elancoapps.com/api/applications');\n    setApplications(response.data);\n    setIsLoading(false);\n  };\n  const selectApplication = async application => {\n    setSelectedApplication(application);\n    setIsLoading(true);\n    const response = await axios.get(`https://engineering-task.elancoapps.com/api/applications/${application}`);\n    setApplicationInfo(response.data);\n    setIsLoading(false);\n    setApplications([application]);\n  };\n  const goBack = () => {\n    setSelectedApplication(null);\n    setApplications([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadApplications,\n      children: \"Load Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 26\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: applications.map(application => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [application, ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => selectApplication(application),\n          children: \"View Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 29\n        }, this)]\n      }, application, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this), selectedApplication && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goBack,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedApplication\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 38\n        }, this) : applicationInfo ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"data\",\n            children: Object.entries(applicationInfo).map(_ref => {\n              let [key, value] = _ref;\n              return `${key}: ${value}\\n\\n`;\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setApplicationInfo(null),\n            children: \"Load Application\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading application information...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n_s(Applications, \"vn5cujy6w0brv2pyLFmv4iwAd5U=\");\n_c = Applications;\nexport default Applications;\n\n/*\r\nfunction Applications() {\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [applications, setApplications] = useState([]);\r\n    const [selectedApplication, setSelectedApplication] = useState(null);\r\n    const [applicationInfo, setApplicationInfo] = useState(null);\r\n\r\n    const loadApplications = async () => {\r\n        setIsLoading(true);\r\n        const response = await axios.get('https://engineering-task.elancoapps.com/api/applications');\r\n        setApplications(response.data);\r\n        setIsLoading(false);\r\n    };\r\n\r\n    const selectApplication = async (application) => {\r\n        setSelectedApplication(application);\r\n        setIsLoading(true);\r\n        const response = await axios.get(`https://engineering-task.elancoapps.com/api/applications/${application}`);\r\n        setApplicationInfo(response.data);\r\n        setIsLoading(false);\r\n    };\r\n    return (\r\n        <div>\r\n            <h1>Applications</h1>\r\n            <button onClick={loadApplications}>Load Applications</button>\r\n            {isLoading ? <p>Loading...</p> : (\r\n                <ul>\r\n                    {applications.map((application) => (\r\n                        <li key={application}>\r\n                            {application}{' '}\r\n                            <button onClick={() => selectApplication(application)}>View Details</button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            )}\r\n            {selectedApplication && (\r\n                <div>\r\n                    <h2>{selectedApplication}</h2>\r\n                    {isLoading ? <p>Loading...</p> : applicationInfo ? (\r\n                        <pre>{JSON.stringify(applicationInfo, null, 2)}</pre>\r\n                    ) : (\r\n                        <p>Loading application information...</p>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Applications;\r\n\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Applications\");","map":{"version":3,"names":["React","useState","axios","Applications","isLoading","setIsLoading","applications","setApplications","selectedApplication","setSelectedApplication","applicationInfo","setApplicationInfo","loadApplications","response","get","data","selectApplication","application","goBack","map","Object","entries","key","value"],"sources":["E:/Placement Tests/Elanco-Task/api-test/src/Contents/Applications.js"],"sourcesContent":["import '../Css/Applications.css';\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nfunction Applications() {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [applications, setApplications] = useState([]);\r\n    const [selectedApplication, setSelectedApplication] = useState(null);\r\n    const [applicationInfo, setApplicationInfo] = useState(null);\r\n\r\n    const loadApplications = async () => {\r\n        setIsLoading(true);\r\n        const response = await axios.get('https://engineering-task.elancoapps.com/api/applications');\r\n        setApplications(response.data);\r\n        setIsLoading(false);\r\n    };\r\n\r\n    const selectApplication = async (application) => {\r\n        setSelectedApplication(application);\r\n        setIsLoading(true);\r\n        const response = await axios.get(`https://engineering-task.elancoapps.com/api/applications/${application}`);\r\n        setApplicationInfo(response.data);\r\n        setIsLoading(false);\r\n        setApplications([application]);\r\n    };\r\n\r\n    const goBack = () => {\r\n        setSelectedApplication(null);\r\n        setApplications([]);\r\n    };\r\n\r\n    return (\r\n        <div className='main'>\r\n            <h1>Applications</h1>\r\n            <button onClick={loadApplications}>Load Applications</button>\r\n            {isLoading ? <p>Loading...</p> : (\r\n                <ul>\r\n                    {applications.map((application) => (\r\n                        <li key={application}>\r\n                            {application}{' '}\r\n                            <button onClick={() => selectApplication(application)}>View Details</button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            )}\r\n            {selectedApplication && (\r\n                <>\r\n                    <button onClick={goBack}>Go Back</button>\r\n                    <div>\r\n                        <h2>{selectedApplication}</h2>\r\n                        {isLoading ? <p>Loading...</p> : applicationInfo ? (\r\n                            <>\r\n                                <pre className=\"data\">{Object.entries(applicationInfo).map(([key, value]) => `${key}: ${value}\\n\\n`)}</pre>\r\n                                <button onClick={() => setApplicationInfo(null)}>Load Application</button>\r\n                            </>\r\n                        ) : (\r\n                            <p>Loading application information...</p>\r\n                        )}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Applications;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nfunction Applications() {\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [applications, setApplications] = useState([]);\r\n    const [selectedApplication, setSelectedApplication] = useState(null);\r\n    const [applicationInfo, setApplicationInfo] = useState(null);\r\n\r\n    const loadApplications = async () => {\r\n        setIsLoading(true);\r\n        const response = await axios.get('https://engineering-task.elancoapps.com/api/applications');\r\n        setApplications(response.data);\r\n        setIsLoading(false);\r\n    };\r\n\r\n    const selectApplication = async (application) => {\r\n        setSelectedApplication(application);\r\n        setIsLoading(true);\r\n        const response = await axios.get(`https://engineering-task.elancoapps.com/api/applications/${application}`);\r\n        setApplicationInfo(response.data);\r\n        setIsLoading(false);\r\n    };\r\n    return (\r\n        <div>\r\n            <h1>Applications</h1>\r\n            <button onClick={loadApplications}>Load Applications</button>\r\n            {isLoading ? <p>Loading...</p> : (\r\n                <ul>\r\n                    {applications.map((application) => (\r\n                        <li key={application}>\r\n                            {application}{' '}\r\n                            <button onClick={() => selectApplication(application)}>View Details</button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            )}\r\n            {selectedApplication && (\r\n                <div>\r\n                    <h2>{selectedApplication}</h2>\r\n                    {isLoading ? <p>Loading...</p> : applicationInfo ? (\r\n                        <pre>{JSON.stringify(applicationInfo, null, 2)}</pre>\r\n                    ) : (\r\n                        <p>Loading application information...</p>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Applications;\r\n\r\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}