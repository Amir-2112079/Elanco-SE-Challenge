{"ast":null,"code":"var _jsxFileName = \"E:\\\\Placement Tests\\\\Elanco-Task\\\\api-test\\\\src\\\\Contents\\\\Raw.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Raw() {\n  _s();\n  const [data, setData] = useState(null);\n  const handleButtonClick = async (sortField, sortDirection, filterDate) => {\n    let response = await axios.get('https://engineering-task.elancoapps.com/api/raw');\n\n    // Sort the data based on the specified sort field and direction\n    if (sortField && sortDirection) {\n      response.data = response.data.sort((a, b) => {\n        let comparison = 0;\n        if (a[sortField] > b[sortField]) {\n          comparison = 1;\n        } else if (a[sortField] < b[sortField]) {\n          comparison = -1;\n        }\n        return sortDirection === 'asc' ? comparison : -comparison;\n      });\n    }\n\n    // Filter the data based on the specified date\n    if (filterDate) {\n      response.data = response.data.filter(item => item.date === filterDate);\n    }\n    setData(response.data);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: () => handleButtonClick('name', 'asc'),\n        children: \"Sort by Name (A-Z)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: () => handleButtonClick('name', 'desc'),\n        children: \"Sort by Name (Z-A)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick('date', 'asc'),\n        children: \"Sort by Date (Earliest first)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick('date', 'desc'),\n        children: \"Sort by Date (Latest first)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick('price', 'asc'),\n        children: \"Sort by Price (Lowest first)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick('price', 'desc'),\n        children: \"Sort by Price (Highest first)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Filter by Date\",\n        onChange: event => handleButtonClick(null, null, event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), data && /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(data, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(Raw, \"r4Mei8r/vISzc+89378cYwOGDkw=\");\n_c = Raw;\nexport default Raw;\n\n/*\r\n  const [data, setData] = useState(null);\r\n\r\n    const handleButtonClick = async () => {\r\n        const response = await axios.get('https://engineering-task.elancoapps.com/api/raw');\r\n        setData(response.data);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={handleButtonClick}>Get Data</button>\r\n            {data && (\r\n                <pre>{JSON.stringify(data, null, 2)}</pre>\r\n            )}\r\n        </div>\r\n    );\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Raw\");","map":{"version":3,"names":["React","useState","axios","Raw","data","setData","handleButtonClick","sortField","sortDirection","filterDate","response","get","sort","a","b","comparison","filter","item","date","event","target","value","JSON","stringify"],"sources":["E:/Placement Tests/Elanco-Task/api-test/src/Contents/Raw.js"],"sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Raw() {\r\n\r\n    const [data, setData] = useState(null);\r\n\r\n    const handleButtonClick = async (sortField, sortDirection, filterDate) => {\r\n        let response = await axios.get('https://engineering-task.elancoapps.com/api/raw');\r\n\r\n        // Sort the data based on the specified sort field and direction\r\n        if (sortField && sortDirection) {\r\n            response.data = response.data.sort((a, b) => {\r\n                let comparison = 0;\r\n                if (a[sortField] > b[sortField]) {\r\n                    comparison = 1;\r\n                } else if (a[sortField] < b[sortField]) {\r\n                    comparison = -1;\r\n                }\r\n                return sortDirection === 'asc' ? comparison : -comparison;\r\n            });\r\n        }\r\n\r\n        // Filter the data based on the specified date\r\n        if (filterDate) {\r\n            response.data = response.data.filter(item => item.date === filterDate);\r\n        }\r\n\r\n        setData(response.data);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <button className='btn' onClick={() => handleButtonClick('name', 'asc')}>Sort by Name (A-Z)</button>\r\n                <button className='btn' onClick={() => handleButtonClick('name', 'desc')}>Sort by Name (Z-A)</button>\r\n            </div>\r\n            <div>\r\n                <button onClick={() => handleButtonClick('date', 'asc')}>Sort by Date (Earliest first)</button>\r\n                <button onClick={() => handleButtonClick('date', 'desc')}>Sort by Date (Latest first)</button>\r\n            </div>\r\n            <div>\r\n                <button onClick={() => handleButtonClick('price', 'asc')}>Sort by Price (Lowest first)</button>\r\n                <button onClick={() => handleButtonClick('price', 'desc')}>Sort by Price (Highest first)</button>\r\n            </div>\r\n            <div>\r\n                <input type=\"text\" placeholder=\"Filter by Date\" onChange={(event) => handleButtonClick(null, null, event.target.value)} />\r\n            </div>\r\n            {data && (\r\n                <pre>{JSON.stringify(data, null, 2)}</pre>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Raw;\r\n\r\n\r\n\r\n\r\n/*\r\n  const [data, setData] = useState(null);\r\n\r\n    const handleButtonClick = async () => {\r\n        const response = await axios.get('https://engineering-task.elancoapps.com/api/raw');\r\n        setData(response.data);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={handleButtonClick}>Get Data</button>\r\n            {data && (\r\n                <pre>{JSON.stringify(data, null, 2)}</pre>\r\n            )}\r\n        </div>\r\n    );\r\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}