{"ast":null,"code":"import '../Css/Applications.css';\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\n/*\r\n\r\nfunction Applications() {\r\n    //whether the data is being loaded from the API or not \r\n    const [loading, setLoading] = useState(false);\r\n\r\n    //an array that returns the data from API \r\n    const [applications, setApplications] = useState([]);\r\n\r\n    //can be used to select specifc applications \r\n    const [selectedApplication, setSelectedApplication] = useState(null);\r\n\r\n    //shows the details of the selected application \r\n    const [applicationDetail, setApplicationDetail] = useState(null);\r\n\r\n    //indicates to whether display the the list of applications or just the details \r\n    const [showApp, setShowApp] = useState(true);\r\n\r\n    \r\n\r\n\r\n    //async function that sends request to get the values \r\n    const displayApplication = async () => {\r\n        setLoading(true);\r\n        const response = await axios.get('https://engineering-task.elancoapps.com/api/applications');\r\n        setApplications(response.data);\r\n        setLoading(false);\r\n    };\r\n    //async function that sends request to get the details of the selected application\r\n    const chooseApplication = async (application) => {\r\n        setSelectedApplication(application);\r\n        setLoading(true);\r\n        const response = await axios.get(`https://engineering-task.elancoapps.com/api/applications/${application}`);\r\n        setApplicationDetail(response.data);\r\n        setLoading(false);\r\n        setShowApp(false);\r\n    };\r\n\r\n    //allows to clear the selected applition, and load applications again\r\n    const goBack = () => {\r\n        setSelectedApplication(null);\r\n        setApplications([]);\r\n        setShowApp(true);\r\n    };\r\n\r\n    return (\r\n        <div className='main'>\r\n            <h1>Applications</h1>\r\n\r\n            {/*showApp, if showApp is ture we're rendering a button to retirve data from API*}\r\n            {showApp && <button className='btn' onClick={displayApplication}>Load Applications</button>}\r\n\r\n            {/*renders a paragraph if loading is true.*}\r\n            {loading ? (<p>Loading...</p>)\r\n\r\n                //then showApp used to render a list of applications along with a button to see \r\n                // the details of each application and wrapped around a \"li\" to display them as list\r\n                // also used .map to iterate through the array's\r\n                : showApp ? (\r\n                    <ul>\r\n                        {applications.map((application) => (\r\n                            <li key={application}>\r\n                                {application}{\" \"}\r\n                                <button className='btn' onClick={() => chooseApplication(application)}>\r\n                                    View Details\r\n                                </button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n\r\n                    //if showApps is false a \r\n                    < div >\r\n                        <h2>{selectedApplication}</h2>\r\n                        <button className='btn' onClick={goBack}>Go Back</button>\r\n                        {/*if loading is thrue the applications will be shown*}\r\n                        {loading ? (\r\n                            <p>Loading...</p>\r\n                        ) : applicationDetail ? (\r\n                            <div>\r\n                                <pre>{JSON.stringify(applicationDetail, null, 2)}</pre>\r\n                            </div>\r\n                        ) : (\r\n                            <p>Loading application information...</p>\r\n                        )}\r\n                    </div>\r\n                )\r\n            }\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Applications;\r\n\r\n\r\n\r\n\r\n*/","map":{"version":3,"names":["React","useState","axios"],"sources":["E:/Placement Tests/Elanco-Task/api-test/src/Contents/Applications.js"],"sourcesContent":["import '../Css/Applications.css';\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n/*\r\n\r\nfunction Applications() {\r\n    //whether the data is being loaded from the API or not \r\n    const [loading, setLoading] = useState(false);\r\n\r\n    //an array that returns the data from API \r\n    const [applications, setApplications] = useState([]);\r\n\r\n    //can be used to select specifc applications \r\n    const [selectedApplication, setSelectedApplication] = useState(null);\r\n\r\n    //shows the details of the selected application \r\n    const [applicationDetail, setApplicationDetail] = useState(null);\r\n\r\n    //indicates to whether display the the list of applications or just the details \r\n    const [showApp, setShowApp] = useState(true);\r\n\r\n    \r\n\r\n\r\n    //async function that sends request to get the values \r\n    const displayApplication = async () => {\r\n        setLoading(true);\r\n        const response = await axios.get('https://engineering-task.elancoapps.com/api/applications');\r\n        setApplications(response.data);\r\n        setLoading(false);\r\n    };\r\n    //async function that sends request to get the details of the selected application\r\n    const chooseApplication = async (application) => {\r\n        setSelectedApplication(application);\r\n        setLoading(true);\r\n        const response = await axios.get(`https://engineering-task.elancoapps.com/api/applications/${application}`);\r\n        setApplicationDetail(response.data);\r\n        setLoading(false);\r\n        setShowApp(false);\r\n    };\r\n\r\n    //allows to clear the selected applition, and load applications again\r\n    const goBack = () => {\r\n        setSelectedApplication(null);\r\n        setApplications([]);\r\n        setShowApp(true);\r\n    };\r\n\r\n    return (\r\n        <div className='main'>\r\n            <h1>Applications</h1>\r\n\r\n            {/*showApp, if showApp is ture we're rendering a button to retirve data from API*}\r\n            {showApp && <button className='btn' onClick={displayApplication}>Load Applications</button>}\r\n\r\n            {/*renders a paragraph if loading is true.*}\r\n            {loading ? (<p>Loading...</p>)\r\n\r\n                //then showApp used to render a list of applications along with a button to see \r\n                // the details of each application and wrapped around a \"li\" to display them as list\r\n                // also used .map to iterate through the array's\r\n                : showApp ? (\r\n                    <ul>\r\n                        {applications.map((application) => (\r\n                            <li key={application}>\r\n                                {application}{\" \"}\r\n                                <button className='btn' onClick={() => chooseApplication(application)}>\r\n                                    View Details\r\n                                </button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n\r\n                    //if showApps is false a \r\n                    < div >\r\n                        <h2>{selectedApplication}</h2>\r\n                        <button className='btn' onClick={goBack}>Go Back</button>\r\n                        {/*if loading is thrue the applications will be shown*}\r\n                        {loading ? (\r\n                            <p>Loading...</p>\r\n                        ) : applicationDetail ? (\r\n                            <div>\r\n                                <pre>{JSON.stringify(applicationDetail, null, 2)}</pre>\r\n                            </div>\r\n                        ) : (\r\n                            <p>Loading application information...</p>\r\n                        )}\r\n                    </div>\r\n                )\r\n            }\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Applications;\r\n\r\n\r\n\r\n\r\n*/\r\n\r\n"],"mappings":"AAAA,OAAO,yBAAyB;AAChC,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}