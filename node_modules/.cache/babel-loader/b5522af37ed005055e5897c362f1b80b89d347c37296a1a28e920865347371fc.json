{"ast":null,"code":"var _jsxFileName = \"E:\\\\Placement Tests\\\\Elanco-Task\\\\api-test\\\\src\\\\Contents\\\\Applications.js\",\n  _s = $RefreshSig$();\nimport '../Css/Applications.css';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Applications() {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [applications, setApplications] = useState([]);\n  const [selectedApplication, setSelectedApplication] = useState(null);\n  const [applicationDetail, setApplicationDetail] = useState(null);\n  const [showApp, setShowApp] = useState(true);\n  const [filterDate, setFilterDate] = useState('');\n  const [filterPrice, setFilterPrice] = useState('');\n  const displayApplication = async () => {\n    setLoading(true);\n    const params = {};\n    if (filterDate) {\n      params.date = filterDate;\n    }\n    if (filterPrice) {\n      params.price = filterPrice;\n    }\n    const response = await axios.get('https://engineering-task.elancoapps.com/api/applications', {\n      params\n    });\n    setApplications(response.data);\n    setLoading(false);\n  };\n  const chooseApplication = async application => {\n    setSelectedApplication(application);\n    setLoading(true);\n    const params = {};\n    if (filterDate) {\n      params.date = filterDate;\n    }\n    if (filterPrice) {\n      params.price = filterPrice;\n    }\n    const response = await axios.get(`https://engineering-task.elancoapps.com/api/applications/${application}`, {\n      params\n    });\n    setApplicationDetail(response.data);\n    setLoading(false);\n    setShowApp(false);\n  };\n  const goBack = () => {\n    setSelectedApplication(null);\n    setApplications([]);\n    setShowApp(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), showApp && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Filter by Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: filterDate,\n            onChange: e => setFilterDate(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Filter by Price:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: filterPrice,\n            onChange: e => setFilterPrice(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: displayApplication,\n        children: \"Load Applications\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this) : showApp ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: applications.map(application => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [application, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => chooseApplication(application),\n          children: \"View Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 29\n        }, this)]\n      }, application, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedApplication\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: goBack,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 25\n      }, this) : applicationDetail ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(applicationDetail, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading application information...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(Applications, \"5etL/GwS7r4+SlEa3Rm5uAYcrfs=\");\n_c = Applications;\nexport default Applications;\n\n/*\r\nfunction Applications() {\r\n    //whether the data is being loaded from the API or not \r\n    const [loading, setLoading] = useState(false);\r\n\r\n    //an array that returns the data from API \r\n    const [applications, setApplications] = useState([]);\r\n\r\n    //can be used to select specifc applications \r\n    const [selectedApplication, setSelectedApplication] = useState(null);\r\n\r\n    //shows the details of the selected application \r\n    const [applicationDetail, setApplicationDetail] = useState(null);\r\n\r\n    //indicates to whether display the the list of applications or just the details \r\n    const [showApp, setShowApp] = useState(true);\r\n\r\n\r\n\r\n    //async function that sends request to get the values \r\n    const displayApplication = async () => {\r\n        setLoading(true);\r\n        const response = await axios.get('https://engineering-task.elancoapps.com/api/applications');\r\n        setApplications(response.data);\r\n        setLoading(false);\r\n    };\r\n    //async function that sends request to get the details of the selected application\r\n    const chooseApplication = async (application) => {\r\n        setSelectedApplication(application);\r\n        setLoading(true);\r\n        const response = await axios.get(`https://engineering-task.elancoapps.com/api/applications/${application}`);\r\n        setApplicationDetail(response.data);\r\n        setLoading(false);\r\n        setShowApp(false);\r\n    };\r\n\r\n    //allows to clear the selected applition, and load applications again\r\n    const goBack = () => {\r\n        setSelectedApplication(null);\r\n        setApplications([]);\r\n        setShowApp(true);\r\n    };\r\n\r\n    return (\r\n        <div className='main'>\r\n            <h1>Applications</h1>\r\n\r\n            {/*showApp, if showApp is ture we're rendering a button to retirve data from API}\r\n            {showApp && <button className='btn' onClick={displayApplication}>Load Applications</button>}\r\n\r\n            {/*renders a paragraph if loading is true.}\r\n            {loading ? (<p>Loading...</p>)\r\n\r\n                //then showApp used to render a list of applications along with a button to see \r\n                // the details of each application and wrapped around a \"li\" to display them as list\r\n                // also used .map to iterate through the array's\r\n                : showApp ? (\r\n                    <ul>\r\n                        {applications.map((application) => (\r\n                            <li key={application}>\r\n                                {application}{\" \"}\r\n                                <button className='btn' onClick={() => chooseApplication(application)}>\r\n                                    View Details\r\n                                </button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n\r\n                    //if showApps is false a \r\n                    < div >\r\n                        <h2>{selectedApplication}</h2>\r\n                        <button className='btn' onClick={goBack}>Go Back</button>\r\n                        {/*if loading is thrue the applications will be shown}\r\n                        {loading ? (\r\n                            <p>Loading...</p>\r\n                        ) : applicationDetail ? (\r\n                            <div>\r\n                                <pre>{JSON.stringify(applicationDetail, null, 2)}</pre>\r\n                            </div>\r\n                        ) : (\r\n                            <p>Loading application information...</p>\r\n                        )}\r\n                    </div>\r\n                )\r\n            }\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Applications;\r\n\r\n\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Applications\");","map":{"version":3,"names":["React","useState","axios","Applications","loading","setLoading","applications","setApplications","selectedApplication","setSelectedApplication","applicationDetail","setApplicationDetail","showApp","setShowApp","filterDate","setFilterDate","filterPrice","setFilterPrice","displayApplication","params","date","price","response","get","data","chooseApplication","application","goBack","e","target","value","map","JSON","stringify"],"sources":["E:/Placement Tests/Elanco-Task/api-test/src/Contents/Applications.js"],"sourcesContent":["import '../Css/Applications.css';\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction Applications() {\r\n    const [loading, setLoading] = useState(false);\r\n    const [applications, setApplications] = useState([]);\r\n    const [selectedApplication, setSelectedApplication] = useState(null);\r\n    const [applicationDetail, setApplicationDetail] = useState(null);\r\n    const [showApp, setShowApp] = useState(true);\r\n    const [filterDate, setFilterDate] = useState('');\r\n    const [filterPrice, setFilterPrice] = useState('');\r\n\r\n    const displayApplication = async () => {\r\n        setLoading(true);\r\n        const params = {};\r\n        if (filterDate) {\r\n            params.date = filterDate;\r\n        }\r\n        if (filterPrice) {\r\n            params.price = filterPrice;\r\n        }\r\n        const response = await axios.get('https://engineering-task.elancoapps.com/api/applications', { params });\r\n        setApplications(response.data);\r\n        setLoading(false);\r\n    };\r\n\r\n    const chooseApplication = async (application) => {\r\n        setSelectedApplication(application);\r\n        setLoading(true);\r\n        const params = {};\r\n        if (filterDate) {\r\n            params.date = filterDate;\r\n        }\r\n        if (filterPrice) {\r\n            params.price = filterPrice;\r\n        }\r\n        const response = await axios.get(`https://engineering-task.elancoapps.com/api/applications/${application}`, { params });\r\n        setApplicationDetail(response.data);\r\n        setLoading(false);\r\n        setShowApp(false);\r\n    };\r\n\r\n    const goBack = () => {\r\n        setSelectedApplication(null);\r\n        setApplications([]);\r\n        setShowApp(true);\r\n    };\r\n\r\n    return (\r\n        <div className='main'>\r\n            <h1>Applications</h1>\r\n            {showApp && (\r\n                <>\r\n                    <div>\r\n                        <label>\r\n                            Filter by Date:\r\n                            <input type='text' value={filterDate} onChange={(e) => setFilterDate(e.target.value)} />\r\n                        </label>\r\n                        <label>\r\n                            Filter by Price:\r\n                            <input type='text' value={filterPrice} onChange={(e) => setFilterPrice(e.target.value)} />\r\n                        </label>\r\n                    </div>\r\n                    <button className='btn' onClick={displayApplication}>Load Applications</button>\r\n                </>\r\n            )}\r\n            {loading ? (\r\n                <p>Loading...</p>\r\n            ) : showApp ? (\r\n                <ul>\r\n                    {applications.map((application) => (\r\n                        <li key={application}>\r\n                            {application}{\" \"}\r\n                            <button className='btn' onClick={() => chooseApplication(application)}>\r\n                                View Details\r\n                            </button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            ) : (\r\n                <div>\r\n                    <h2>{selectedApplication}</h2>\r\n                    <button className='btn' onClick={goBack}>Go Back</button>\r\n                    {loading ? (\r\n                        <p>Loading...</p>\r\n                    ) : applicationDetail ? (\r\n                        <div>\r\n                            <pre>{JSON.stringify(applicationDetail, null, 2)}</pre>\r\n                        </div>\r\n                    ) : (\r\n                        <p>Loading application information...</p>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Applications;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nfunction Applications() {\r\n    //whether the data is being loaded from the API or not \r\n    const [loading, setLoading] = useState(false);\r\n\r\n    //an array that returns the data from API \r\n    const [applications, setApplications] = useState([]);\r\n\r\n    //can be used to select specifc applications \r\n    const [selectedApplication, setSelectedApplication] = useState(null);\r\n\r\n    //shows the details of the selected application \r\n    const [applicationDetail, setApplicationDetail] = useState(null);\r\n\r\n    //indicates to whether display the the list of applications or just the details \r\n    const [showApp, setShowApp] = useState(true);\r\n\r\n\r\n\r\n    //async function that sends request to get the values \r\n    const displayApplication = async () => {\r\n        setLoading(true);\r\n        const response = await axios.get('https://engineering-task.elancoapps.com/api/applications');\r\n        setApplications(response.data);\r\n        setLoading(false);\r\n    };\r\n    //async function that sends request to get the details of the selected application\r\n    const chooseApplication = async (application) => {\r\n        setSelectedApplication(application);\r\n        setLoading(true);\r\n        const response = await axios.get(`https://engineering-task.elancoapps.com/api/applications/${application}`);\r\n        setApplicationDetail(response.data);\r\n        setLoading(false);\r\n        setShowApp(false);\r\n    };\r\n\r\n    //allows to clear the selected applition, and load applications again\r\n    const goBack = () => {\r\n        setSelectedApplication(null);\r\n        setApplications([]);\r\n        setShowApp(true);\r\n    };\r\n\r\n    return (\r\n        <div className='main'>\r\n            <h1>Applications</h1>\r\n\r\n            {/*showApp, if showApp is ture we're rendering a button to retirve data from API}\r\n            {showApp && <button className='btn' onClick={displayApplication}>Load Applications</button>}\r\n\r\n            {/*renders a paragraph if loading is true.}\r\n            {loading ? (<p>Loading...</p>)\r\n\r\n                //then showApp used to render a list of applications along with a button to see \r\n                // the details of each application and wrapped around a \"li\" to display them as list\r\n                // also used .map to iterate through the array's\r\n                : showApp ? (\r\n                    <ul>\r\n                        {applications.map((application) => (\r\n                            <li key={application}>\r\n                                {application}{\" \"}\r\n                                <button className='btn' onClick={() => chooseApplication(application)}>\r\n                                    View Details\r\n                                </button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n\r\n                    //if showApps is false a \r\n                    < div >\r\n                        <h2>{selectedApplication}</h2>\r\n                        <button className='btn' onClick={goBack}>Go Back</button>\r\n                        {/*if loading is thrue the applications will be shown}\r\n                        {loading ? (\r\n                            <p>Loading...</p>\r\n                        ) : applicationDetail ? (\r\n                            <div>\r\n                                <pre>{JSON.stringify(applicationDetail, null, 2)}</pre>\r\n                            </div>\r\n                        ) : (\r\n                            <p>Loading application information...</p>\r\n                        )}\r\n                    </div>\r\n                )\r\n            }\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Applications;\r\n\r\n\r\n*/\r\n\r\n\r\n\r\n"],"mappings":"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A,QAAS;MAAA,GAJJA,WAAW;QAAA;QAAA;QAAA;MAAA,QAMvB;IAAC;MAAA;MAAA;MAAA;IAAA,QACD,gBAEL;MAAA,wBACI;QAAA,UAAKlB;MAAmB;QAAA;QAAA;QAAA;MAAA,QAAM,eAC9B;QAAQ,SAAS,EAAC,KAAK;QAAC,OAAO,EAAEmB,MAAO;QAAA,UAAC;MAAO;QAAA;QAAA;QAAA;MAAA,QAAS,EACxDvB,OAAO,gBACJ;QAAA,UAAG;MAAU;QAAA;QAAA;QAAA;MAAA,QAAI,GACjBM,iBAAiB,gBACjB;QAAA,uBACI;UAAA,UAAMsB,IAAI,CAACC,SAAS,CAACvB,iBAAiB,EAAE,IAAI,EAAE,CAAC;QAAC;UAAA;UAAA;UAAA;QAAA;MAAO;QAAA;QAAA;QAAA;MAAA,QACrD,gBAEN;QAAA,UAAG;MAAkC;QAAA;QAAA;QAAA;MAAA,QACxC;IAAA;MAAA;MAAA;MAAA;IAAA,QAER;EAAA;IAAA;IAAA;IAAA;EAAA,QACC;AAEd;AAAC,GA7FQP,YAAY;AAAA,KAAZA,YAAY;AA+FrB,eAAeA,YAAY;;AAe3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7FA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}