{"ast":null,"code":"var _jsxFileName = \"E:\\\\Placement Tests\\\\Elanco-Task\\\\Elanco-SE-Challenge\\\\src\\\\Contents\\\\Raw.js\",\n  _s = $RefreshSig$();\nimport '../Css/Raw.css';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Raw() {\n  _s();\n  //saves the data that is coming from the API\n  const [, setData] = useState(null);\n  //adding the initial values for the sort functions\n  const [sortOrder, setSortOrder] = useState({\n    ConsumedQuantity: 'asc',\n    Cost: 'asc'\n  });\n  //keeps track of the sort order e.g., are we in asc order or desc\n  const [sortedData, setSortedData] = useState(null);\n\n  //used axios to get the data from the API, then saved it in the setData and setSortedData\n  const handleButtonClick = () => {\n    axios.get('https://engineering-task.elancoapps.com/api/raw').then(response => {\n      setData(response.data);\n      setSortedData(response.data);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n  const sortByConsumedQuantity = () => {\n    //to display to the users that what order their on \n    const order = sortOrder.ConsumedQuantity === 'asc' ? 'desc' : 'asc';\n    //creating a new array to save all the new sorted data by subtracting \"x by y\" to get the \"desc\" and \"y by x\" to get \"asc\" \n    const sorted = sortedData.sort((x, y) => {\n      return order === 'asc' ? x.ConsumedQuantity - y.ConsumedQuantity : y.ConsumedQuantity - x.ConsumedQuantity;\n    });\n    //sorted data is updated in the setSortedData\n    setSortedData(sorted);\n    //used a spread operator overwrites the current state of sort order by the new state after it is sorted into asc or desc order.\n    setSortOrder({\n      ...sortOrder,\n      ConsumedQuantity: order\n    });\n  };\n\n  //same as the previous function\n  const sortByCost = () => {\n    const order = sortOrder.Cost === 'asc' ? 'desc' : 'asc';\n    const sorted = sortedData.sort((x, y) => {\n      return order === 'asc' ? x.Cost - y.Cost : y.Cost - x.Cost;\n    });\n    setSortedData(sorted);\n    setSortOrder({\n      ...sortOrder,\n      Cost: order\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Raw Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: handleButtonClick,\n      children: \"Load Raw Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), sortedData &&\n    /*#__PURE__*/\n    //if sortedData is true we are displaying  two buttons for each sorting functions \n    //that has been defined above, else it's going to be null!\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"rbtn\",\n        onClick: sortByConsumedQuantity,\n        children: [\"Sort by ConsumedQuantity (\", sortOrder.ConsumedQuantity, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"rbtn\",\n        onClick: sortByCost,\n        children: [\"Sort by Cost (\", sortOrder.Cost, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(sortedData, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_s(Raw, \"nTSaA41NdBmeYvGn/j2ZPjArcUM=\");\n_c = Raw;\nexport default Raw;\nvar _c;\n$RefreshReg$(_c, \"Raw\");","map":{"version":3,"names":["React","useState","axios","Raw","setData","sortOrder","setSortOrder","ConsumedQuantity","Cost","sortedData","setSortedData","handleButtonClick","get","then","response","data","catch","error","console","sortByConsumedQuantity","order","sorted","sort","x","y","sortByCost","JSON","stringify"],"sources":["E:/Placement Tests/Elanco-Task/Elanco-SE-Challenge/src/Contents/Raw.js"],"sourcesContent":["import '../Css/Raw.css'\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Raw() {\r\n    //saves the data that is coming from the API\r\n    const [, setData] = useState(null);\r\n    //adding the initial values for the sort functions\r\n    const [sortOrder, setSortOrder] = useState({\r\n        ConsumedQuantity: 'asc',\r\n        Cost: 'asc'\r\n    });\r\n    //keeps track of the sort order e.g., are we in asc order or desc\r\n    const [sortedData, setSortedData] = useState(null);\r\n\r\n\r\n    //used axios to get the data from the API, then saved it in the setData and setSortedData\r\n    const handleButtonClick = () => {\r\n        axios.get('https://engineering-task.elancoapps.com/api/raw')\r\n            .then(response => {\r\n                setData(response.data);\r\n                setSortedData(response.data);\r\n            }).catch(error => {\r\n                console.error(error);\r\n            })\r\n    };\r\n\r\n\r\n    const sortByConsumedQuantity = () => {\r\n        //to display to the users that what order their on \r\n        const order = sortOrder.ConsumedQuantity === 'asc' ? 'desc' : 'asc';\r\n        //creating a new array to save all the new sorted data by subtracting \"x by y\" to get the \"desc\" and \"y by x\" to get \"asc\" \r\n        const sorted = sortedData.sort((x, y) => {\r\n            return order === 'asc' ? x.ConsumedQuantity - y.ConsumedQuantity : y.ConsumedQuantity - x.ConsumedQuantity;\r\n        });\r\n        //sorted data is updated in the setSortedData\r\n        setSortedData(sorted);\r\n        //used a spread operator overwrites the current state of sort order by the new state after it is sorted into asc or desc order.\r\n        setSortOrder({ ...sortOrder, ConsumedQuantity: order });\r\n    };\r\n\r\n\r\n    //same as the previous function\r\n    const sortByCost = () => {\r\n        const order = sortOrder.Cost === 'asc' ? 'desc' : 'asc';\r\n        const sorted = sortedData.sort((x, y) => {\r\n            return order === 'asc' ? x.Cost - y.Cost : y.Cost - x.Cost;\r\n        })\r\n        setSortedData(sorted);\r\n        setSortOrder({ ...sortOrder, Cost: order });\r\n    };\r\n\r\n\r\n    return (\r\n        <div className='main'>\r\n            <h1>Raw Data</h1>\r\n            <button className='btn' onClick={handleButtonClick}>Load Raw Data</button>\r\n\r\n            {sortedData && (\r\n                //if sortedData is true we are displaying  two buttons for each sorting functions \r\n                //that has been defined above, else it's going to be null!\r\n                <>\r\n                    <br />\r\n                    <button className='rbtn' onClick={sortByConsumedQuantity}>\r\n                        Sort by ConsumedQuantity ({sortOrder.ConsumedQuantity})\r\n                    </button>\r\n                    <br />\r\n                    <button className='rbtn' onClick={sortByCost}>\r\n                        Sort by Cost ({sortOrder.Cost})\r\n                    </button>\r\n\r\n                    <pre>{JSON.stringify(sortedData, null, 2)}</pre>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Raw;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}