{"ast":null,"code":"var _jsxFileName = \"E:\\\\Placement Tests\\\\Elanco-Task\\\\api-test\\\\src\\\\Contents\\\\Applications.js\",\n  _s = $RefreshSig$();\nimport '../Css/Applications.css';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Applications() {\n  _s();\n  //whether the data is being loaded from the API or not \n  const [loading, setLoading] = useState(false);\n\n  //an array that returns the data from API \n  const [applications, setApplications] = useState([]);\n\n  //can be used to select specifc applications \n  const [selectedApplication, setSelectedApplication] = useState(null);\n\n  //shows the details of the selected application \n  const [applicationDetail, setApplicationDetail] = useState(null);\n\n  //indicates to whether display the the list of applications or just the details \n  const [showApp, setShowApp] = useState(true);\n\n  //async function that sends request to get the values \n  const displayApplication = async () => {\n    setLoading(true);\n    const response = await axios.get('https://engineering-task.elancoapps.com/api/applications');\n    setApplications(response.data);\n    setLoading(false);\n  };\n  //async function that sends request to get the details of the selected application\n  const chooseApplication = async application => {\n    setSelectedApplication(application);\n    setLoading(true);\n    const response = await axios.get(`https://engineering-task.elancoapps.com/api/applications/${application}`);\n    setApplicationDetail(response.data);\n    setLoading(false);\n    setShowApp(false);\n  };\n\n  //allows to clear the selected applition, and load applications again\n  const goBack = () => {\n    setSelectedApplication(null);\n    setApplications([]);\n    setShowApp(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), showApp && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: displayApplication,\n      children: \"Load Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }, this)\n\n    //then showApp used to render a list of applications along with a button to see \n    // the details of each application and wrapped around a \"li\" to display them as list\n    // also used .map to iterate through the array's\n    : showApp ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: applications.map(application => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [application, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => chooseApplication(application),\n          children: \"View Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 33\n        }, this)]\n      }, application, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 29\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }, this) :\n    /*#__PURE__*/\n    //if showApps is false a \n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedApplication\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: goBack,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 29\n      }, this) : applicationDetail ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: JSON.stringify(applicationDetail, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading application information...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(Applications, \"KKAMAqVYsdTPRljicMHwI8cmuOY=\");\n_c = Applications;\nexport default Applications;\nvar _c;\n$RefreshReg$(_c, \"Applications\");","map":{"version":3,"names":["React","useState","axios","Applications","loading","setLoading","applications","setApplications","selectedApplication","setSelectedApplication","applicationDetail","setApplicationDetail","showApp","setShowApp","displayApplication","response","get","data","chooseApplication","application","goBack","map","JSON","stringify"],"sources":["E:/Placement Tests/Elanco-Task/api-test/src/Contents/Applications.js"],"sourcesContent":["import '../Css/Applications.css';\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nfunction Applications() {\r\n    //whether the data is being loaded from the API or not \r\n    const [loading, setLoading] = useState(false);\r\n\r\n    //an array that returns the data from API \r\n    const [applications, setApplications] = useState([]);\r\n\r\n    //can be used to select specifc applications \r\n    const [selectedApplication, setSelectedApplication] = useState(null);\r\n\r\n    //shows the details of the selected application \r\n    const [applicationDetail, setApplicationDetail] = useState(null);\r\n\r\n    //indicates to whether display the the list of applications or just the details \r\n    const [showApp, setShowApp] = useState(true);\r\n\r\n    //async function that sends request to get the values \r\n    const displayApplication = async () => {\r\n        setLoading(true);\r\n        const response = await axios.get('https://engineering-task.elancoapps.com/api/applications');\r\n        setApplications(response.data);\r\n        setLoading(false);\r\n    };\r\n    //async function that sends request to get the details of the selected application\r\n    const chooseApplication = async (application) => {\r\n        setSelectedApplication(application);\r\n        setLoading(true);\r\n        const response = await axios.get(`https://engineering-task.elancoapps.com/api/applications/${application}`);\r\n        setApplicationDetail(response.data);\r\n        setLoading(false);\r\n        setShowApp(false);\r\n    };\r\n\r\n    //allows to clear the selected applition, and load applications again\r\n    const goBack = () => {\r\n        setSelectedApplication(null);\r\n        setApplications([]);\r\n        setShowApp(true);\r\n    };\r\n\r\n    return (\r\n        <div className='main'>\r\n            <h1>Applications</h1>\r\n\r\n            {/*showApp, if showApp is ture we're rendering a button to retirve data from API*/}\r\n            {showApp && <button className='btn' onClick={displayApplication}>Load Applications</button>}\r\n\r\n            {/*renders a paragraph if loading is true.*/}\r\n            {loading ? (<p>Loading...</p>)\r\n\r\n                //then showApp used to render a list of applications along with a button to see \r\n                // the details of each application and wrapped around a \"li\" to display them as list\r\n                // also used .map to iterate through the array's\r\n                : showApp ? (\r\n                    <ul>\r\n                        {applications.map((application) => (\r\n                            <li key={application}>\r\n                                {application}{\" \"}\r\n                                <button className='btn' onClick={() => chooseApplication(application)}>\r\n                                    View Details\r\n                                </button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n\r\n                    //if showApps is false a \r\n                    < div >\r\n                        <h2>{selectedApplication}</h2>\r\n                        <button className='btn' onClick={goBack}>Go Back</button>\r\n                        {/*if loading is thrue the applications will be shown*/}\r\n                        {loading ? (\r\n                            <p>Loading...</p>\r\n                        ) : applicationDetail ? (\r\n                            <div>\r\n                                <h3>{JSON.stringify(applicationDetail, null, 2)}</h3>\r\n                            </div>\r\n                        ) : (\r\n                            <p>Loading application information...</p>\r\n                        )}\r\n                    </div>\r\n                )\r\n            }\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Applications;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}