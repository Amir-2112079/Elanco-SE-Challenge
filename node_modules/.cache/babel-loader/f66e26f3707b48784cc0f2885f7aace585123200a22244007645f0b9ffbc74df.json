{"ast":null,"code":"var _jsxFileName = \"E:\\\\Placement Tests\\\\Elanco-Task\\\\Elanco-SE-Challenge\\\\src\\\\Contents\\\\Resources.js\",\n  _s = $RefreshSig$();\nimport '../Css/Resources.css';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Resources() {\n  _s();\n  //whether the data is being loaded from the API or not \n  const [loading] = useState(false);\n\n  //an array that returns the data from API \n  const [resources, setResources] = useState([]);\n\n  //can be used to select specific resources  \n  const [selectedResources, setSelectedResources] = useState(null);\n\n  //shows the details of the selected resources \n  const [resourcesDetail, setResourcesDetail] = useState(null);\n\n  //indicates to whether display the the list of resources or just the details \n  const [showApp, setShowApp] = useState(true);\n\n  //used axios to get the data from API then saved it in the setResources\n  const displayResources = () => {\n    axios.get('https://engineering-task.elancoapps.com/api/resources').then(response => {\n      setResources(response.data);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  //used axios to retrieve resources from the API, and then I used the resources parameter to\n  // retrieve information for a specific application that the user had selected. \n  // also saving the data in resource detail, then letting showapp to \n  //false(meaning the user has clicked on view details) and adding the data into the setSortedData array \n  const chooseResources = resources => {\n    setSelectedResources(resources);\n    axios.get(`https://engineering-task.elancoapps.com/api/resources/${resources}`).then(response => {\n      setResourcesDetail(response.data);\n      setShowApp(false);\n      setSortedData(response.data);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  //allows to clear the selected resources, and load the original page \n  const goBack = () => {\n    setSelectedResources(null);\n    setResources([]);\n    setShowApp(true);\n  };\n\n  //adding the initial values for the sort functions\n  const [sortOrder, setSortOrder] = useState({\n    ConsumedQuantity: 'asc',\n    Cost: 'asc'\n  });\n  //keeps track of the sort order e.g., are we in asc order or desc\n  const [sortedData, setSortedData] = useState(null);\n  const sortByConsumedQuantity = () => {\n    //to display to the users that what order their on \n    const order = sortOrder.ConsumedQuantity === 'asc' ? 'desc' : 'asc';\n    //creating a new array to save all the new sorted data by subtracting \"x by y\" to get the \"desc\" and \"y by x\" to get \"asc\" \n    const sorted = sortedData.sort((x, y) => {\n      return order === 'asc' ? x.ConsumedQuantity - y.ConsumedQuantity : y.ConsumedQuantity - x.ConsumedQuantity;\n    });\n    //sorted data is updated in the setSortedData\n    setSortedData(sorted);\n    //used a spread operator overwrites the current state of sort order by the new state after it is sorted into asc or desc order.\n    setSortOrder({\n      ...sortOrder,\n      ConsumedQuantity: order\n    });\n  };\n\n  //same as the previous function\n  const sortByCost = () => {\n    const order = sortOrder.Cost === 'asc' ? 'desc' : 'asc';\n    const sorted = sortedData.sort((x, y) => {\n      return order === 'asc' ? x.Cost - y.Cost : y.Cost - x.Cost;\n    });\n    setSortedData(sorted);\n    setSortOrder({\n      ...sortOrder,\n      Cost: order\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Resources\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), showApp && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: displayResources,\n      children: \"Load Resources\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 24\n    }, this) :\n    //also, if showApp is true it renders a list of resources and a button to view the details of each resources,\n    //.map allows us to iterate through the array\n    showApp ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: resources.map(resource => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [resource, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: () => chooseResources(resource),\n          children: \"View Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 29\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }, this) :\n    /*#__PURE__*/\n    //if showApp is false, it displays the details of the selected resources and a message as well as a go back button\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedResources\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: goBack,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 36\n      }, this) : resourcesDetail ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"rbtn\",\n          onClick: sortByConsumedQuantity,\n          children: [\"Sort by ConsumedQuantity (\", sortOrder.ConsumedQuantity, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"rbtn\",\n          onClick: sortByCost,\n          children: [\"Sort by Cost (\", sortOrder.Cost, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(resourcesDetail, null, 5)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n_s(Resources, \"qmCf0Z3wswgMFyyxQMjb/uLZ3W8=\");\n_c = Resources;\n;\nexport default Resources;\nvar _c;\n$RefreshReg$(_c, \"Resources\");","map":{"version":3,"names":["React","useState","axios","Resources","loading","resources","setResources","selectedResources","setSelectedResources","resourcesDetail","setResourcesDetail","showApp","setShowApp","displayResources","get","then","response","data","catch","error","console","chooseResources","setSortedData","goBack","sortOrder","setSortOrder","ConsumedQuantity","Cost","sortedData","sortByConsumedQuantity","order","sorted","sort","x","y","sortByCost","map","resource","JSON","stringify"],"sources":["E:/Placement Tests/Elanco-Task/Elanco-SE-Challenge/src/Contents/Resources.js"],"sourcesContent":["import '../Css/Resources.css';\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Resources() {\r\n    //whether the data is being loaded from the API or not \r\n    const [loading] = useState(false);\r\n\r\n    //an array that returns the data from API \r\n    const [resources, setResources] = useState([]);\r\n\r\n    //can be used to select specific resources  \r\n    const [selectedResources, setSelectedResources] = useState(null);\r\n\r\n    //shows the details of the selected resources \r\n    const [resourcesDetail, setResourcesDetail] = useState(null);\r\n\r\n    //indicates to whether display the the list of resources or just the details \r\n    const [showApp, setShowApp] = useState(true);\r\n\r\n\r\n\r\n    //used axios to get the data from API then saved it in the setResources\r\n    const displayResources = () => {\r\n        axios.get('https://engineering-task.elancoapps.com/api/resources')\r\n            .then(response => {\r\n                setResources(response.data);\r\n            }).catch(error => {\r\n                console.error(error);\r\n            })\r\n    };\r\n\r\n    //used axios to retrieve resources from the API, and then I used the resources parameter to\r\n    // retrieve information for a specific application that the user had selected. \r\n    // also saving the data in resource detail, then letting showapp to \r\n    //false(meaning the user has clicked on view details) and adding the data into the setSortedData array \r\n    const chooseResources = (resources) => {\r\n        setSelectedResources(resources);\r\n        axios.get(`https://engineering-task.elancoapps.com/api/resources/${resources}`)\r\n            .then(response => {\r\n                setResourcesDetail(response.data);\r\n                setShowApp(false);\r\n                setSortedData(response.data);\r\n            }).catch(error => {\r\n                console.error(error);\r\n            })\r\n    };\r\n\r\n    //allows to clear the selected resources, and load the original page \r\n    const goBack = () => {\r\n        setSelectedResources(null);\r\n        setResources([]);\r\n        setShowApp(true);\r\n    };\r\n\r\n    //adding the initial values for the sort functions\r\n    const [sortOrder, setSortOrder] = useState({\r\n        ConsumedQuantity: 'asc',\r\n        Cost: 'asc'\r\n    });\r\n    //keeps track of the sort order e.g., are we in asc order or desc\r\n    const [sortedData, setSortedData] = useState(null);\r\n\r\n\r\n    const sortByConsumedQuantity = () => {\r\n        //to display to the users that what order their on \r\n        const order = sortOrder.ConsumedQuantity === 'asc' ? 'desc' : 'asc';\r\n        //creating a new array to save all the new sorted data by subtracting \"x by y\" to get the \"desc\" and \"y by x\" to get \"asc\" \r\n        const sorted = sortedData.sort((x, y) => {\r\n            return order === 'asc' ? x.ConsumedQuantity - y.ConsumedQuantity : y.ConsumedQuantity - x.ConsumedQuantity;\r\n        });\r\n        //sorted data is updated in the setSortedData\r\n        setSortedData(sorted);\r\n        //used a spread operator overwrites the current state of sort order by the new state after it is sorted into asc or desc order.\r\n        setSortOrder({ ...sortOrder, ConsumedQuantity: order });\r\n    };\r\n\r\n    //same as the previous function\r\n    const sortByCost = () => {\r\n        const order = sortOrder.Cost === 'asc' ? 'desc' : 'asc';\r\n        const sorted = sortedData.sort((x, y) => {\r\n            return order === 'asc' ? x.Cost - y.Cost : y.Cost - x.Cost;\r\n        })\r\n        setSortedData(sorted);\r\n        setSortOrder({ ...sortOrder, Cost: order });\r\n    };\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className='main'>\r\n            <h1>Resources</h1>\r\n\r\n            {/* Render a button to retrieve data from API if showApp is true */}\r\n            {showApp && <button className='btn' onClick={displayResources}>Load Resources</button>}\r\n\r\n            {/* Renders a paragraph if loading is true */}\r\n            {loading ? <p>Loading...</p> :\r\n\r\n                //also, if showApp is true it renders a list of resources and a button to view the details of each resources,\r\n                //.map allows us to iterate through the array\r\n                showApp ? (\r\n                    <ul>\r\n                        {resources.map((resource) => (\r\n                            <li >\r\n                                {resource}{\" \"}\r\n                                <button className='btn' onClick={() => chooseResources(resource)}>\r\n                                    View Details\r\n                                </button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) :\r\n\r\n                    //if showApp is false, it displays the details of the selected resources and a message as well as a go back button\r\n                    <div>\r\n                        <h2>{selectedResources}</h2>\r\n                        <button className='btn' onClick={goBack}>Go Back</button>\r\n                        {loading ? <p>Loading...</p> :\r\n                            resourcesDetail ? (\r\n                                <>\r\n                                    <br />\r\n                                    <button className='rbtn' onClick={sortByConsumedQuantity}>\r\n                                        Sort by ConsumedQuantity ({sortOrder.ConsumedQuantity})\r\n                                    </button>\r\n                                    <br />\r\n                                    <button className='rbtn' onClick={sortByCost}>\r\n                                        Sort by Cost ({sortOrder.Cost})\r\n                                    </button>\r\n                                    <pre>{JSON.stringify(resourcesDetail, null, 5)}</pre>\r\n                                </>\r\n                            ) : null}\r\n                    </div>\r\n            }\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default Resources;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}